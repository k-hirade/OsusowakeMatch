DROP DATABASE IF EXISTS `dbname`;
CREATE DATABASE `dbname`;
USE `dbname`;

DROP TABLE IF EXISTS `User`;
CREATE TABLE `User` (
  `userId` INT(11) NOT NULL AUTO_INCREMENT,
  `userName` VARCHAR(50) NOT NULL,
  `email` VARCHAR(100) NOT NULL UNIQUE,
  `password` TEXT NOT NULL,
  `createdAt` TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
  `updatedAt` TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
  PRIMARY KEY (`userId`)
);

DROP TABLE IF EXISTS `Food`;
CREATE TABLE `Food` (
  `foodId` INT(11) NOT NULL AUTO_INCREMENT,
  `userId` INT(11) NOT NULL,
  `foodName` TEXT NOT NULL,
  `foodImageUrl` TEXT NOT NULL,
  `isSoldOut` BOOLEAN NOT NULL DEFAULT FALSE,
  `expirationDate` DATE NOT NULL,
  `quantity` TEXT NOT NULL,
  `description` TEXT,
  `createdAt` TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
  `updatedAt` TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
  PRIMARY KEY (`foodId`),
  FOREIGN KEY (`userId`) REFERENCES `User`(`userId`) ON DELETE CASCADE
);

DROP TABLE IF EXISTS `Deal`;
CREATE TABLE `Deal` (
`dealId` INT(11) NOT NULL AUTO_INCREMENT,
`requesterId` INT(11) NOT NULL,
`foodId` INT(11) NOT NULL,
`isComplete` BOOLEAN NOT NULL DEFAULT FALSE,
`createdAt` TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
`updatedAt` TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
PRIMARY KEY (`dealId`),
FOREIGN KEY (`requesterId`) REFERENCES `User`(`userId`) ON DELETE CASCADE,
FOREIGN KEY (`foodId`) REFERENCES `Food`(`foodId`) ON DELETE CASCADE
);

DROP TABLE IF EXISTS `Chat`;
CREATE TABLE `Chat` (
`chatId` INT(11) NOT NULL AUTO_INCREMENT,
`dealId` INT(11) NOT NULL,
`senderId` INT(11) NOT NULL,
`content` TEXT,
`createdAt` TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
PRIMARY KEY (`chatId`),
FOREIGN KEY (`dealId`) REFERENCES `Deal`(`dealId`) ON DELETE CASCADE,
FOREIGN KEY (`senderId`) REFERENCES `User`(`userId`) ON DELETE CASCADE
);

DROP TABLE IF EXISTS `FriendShip`;
CREATE TABLE `FriendShip` (
`friendShipId` INT(11) NOT NULL AUTO_INCREMENT,
`followeeId` INT(11) NOT NULL,
`followerId` INT(11) NOT NULL,
PRIMARY KEY (`FriendShipId`),
FOREIGN KEY (`followeeId`) REFERENCES `User`(`userId`) ON DELETE CASCADE,
FOREIGN KEY (`followerId`) REFERENCES `User`(`userId`) ON DELETE CASCADE
);
