#!/usr/bin/env node

/**
 * Module dependencies.
 */

const app = require('../app');
const debug = require('debug')('docker:server');
const http = require('http');
const socketIo = require('socket.io');
const pool = require("../mysqlConnection");


/**
 * Get port from environment and store in Express.
 */

const port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

const server = http.createServer(app);

const io = socketIo(server, {
    cors: {
        origin: "*",
        methods: ["GET", "POST", "PUT", "DELETE"],
    },
});

io.on('connection', (socket) => {
    console.log('User connected');

    socket.on('join-room', (room) => {
      socket.join(room);
      console.log("User joined room:", room);
    })

    socket.on('send-message', (message) => {
        // メッセージの内容を確認
        if (
            message.dealId === null ||
            message.senderId === null ||
            message.content === null
        ) {
            // ここではエラーをクライアントに返す方法として、
            // エラーメッセージをemitすることを選びます。
            socket.emit('message-error', {
                message: "Bad Request",
                error: "dealId, senderId, cannot be null",
            });
            return;
        }

        pool.query(
            "INSERT INTO Chat (dealId, senderId, content) VALUES (?,?,?)",
            [message.dealId, message.senderId, message.content],
            (err, results) => {
                if (err) {
                    console.error("chats.js: sql execute error:", err);
                    socket.emit('message-error', {
                        message: "Internal Server Error",
                        error: err.message
                    });
                    return;
                }
                console.log("chats.js: sql execute success");
                        // ここで、挿入したメッセージの詳細を取得
                console.log("Executing the second query with chatId:", results.insertId);
                pool.query("SELECT * FROM Chat WHERE chatId = ?", [results.insertId], (err, rows) => {
                  if (err || rows.length === 0) {
                      console.error("chats.js: sql fetch error:", err);
                      return;
                  }
                  const fullMessage = rows[0];

                  
                  const dealRoom = `deal_${message.dealId}`;
                  io.to(dealRoom).emit('new-message', fullMessage);
              });
          },
        );
    });

    socket.on('disconnect', () => {
        console.log('User disconnected');
    });
});


/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
